[["/home/project/server.js","import express from 'express';\nimport cors from 'cors';\nimport pg from 'pg';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst app = express();\nconst port = 3001;\n\nconst { Pool } = pg;\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n});\n\napp.use(cors());\napp.use(express.json());\n\n// Register a new user\napp.post('/api/register', async (req, res) => {\n  const { username, email, password } = req.body;\n  try {\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const result = await pool.query(\n      'INSERT INTO public.users (username, email, password) VALUES ($1, $2, $3) RETURNING id',\n      [username, email, hashedPassword]\n    );\n    res.status(201).json({ message: 'User registered successfully', userId: result.rows[0].id });\n  } catch (error) {\n    console.error('Error registering user:', error);\n    res.status(500).json({ message: 'Error registering user' });\n  }\n});\n\n// Login\napp.post('/api/login', async (req, res) => {\n  const { email, password } = req.body;\n  try {\n    const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);\n    if (result.rows.length === 0) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n    const user = result.rows[0];\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n    const token = jwt.sign({ userId: user.id, email: user.email }, process.env.JWT_SECRET, { expiresIn: '1h' });\n    res.json({ token, user: { id: user.id, username: user.username, email: user.email } });\n  } catch (error) {\n    console.error('Error logging in:', error);\n    res.status(500).json({ message: 'Error logging in' });\n  }\n});\n\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});"]]